<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
	<!-- needed for ContextLoadListener -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring-persist-*.xml</param-value>
	</context-param>
	<!-- Bootstraps the root application context before servlet initialization -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<filter>

		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<!-- 指定字符集 -->
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<!-- 强制请求设置字符集 -->
		<init-param>
			<param-name>forceRequestEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
		<!-- 强制响应设置字符集 -->
		<init-param>
			<param-name>forceResponseEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<!-- 这个Filter执行的顺序必须在所有Filter前面 -->
	<!-- 	原因如下 -->
	<!-- request.setCharacterEncoding(encoding) 要求必须在所有request.getParameter(xxx)操作前面 -->
	<!-- response.setCharacterEncoding(encoding)要求必须在所有 response.getWriter() 操作前面 -->
	<!-- 不满足这个顺序要求字符集设定无法生效 -->
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 配置 SpringMVC 的前端控制器 -->
	<!-- The front controller of this Spring Web application, responsible for handling all application
	requests -->

	<servlet>
		<servlet-name>springDispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- 以初始化参数的形式指定 SpringMVC 配置文件的位置 -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-web-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<!-- 让 DispatcherServlet 在 Web 应用启动时创建对象、初始化 -->
		<!-- 默认情况：Servlet 在第一次请求的时候创建对象、初始化 -->
		<!-- 而DispatcherServlet创建对象后有着大量的"框架初始化"操作,不适合在第一次请求时来做 -->
		<!-- 设置load-on-startup就是为了让DispatcherServlet在Web应用启动时创建对象,初始化 -->
	</servlet>
	<!-- Map all requests to the DispatcherServlet for handling -->
	<servlet-mapping>
		<servlet-name>springDispatcherServlet</servlet-name>
		<!-- DispatcherServlet 映射的 URL 地址 -->
		<!-- 大白话：什么样的访问地址会交给 SpringMVC 来处理 -->
		<!-- 配置方式一：符合 RESTFUL 风格使用“/” -->
		<!-- <url-pattern>/</url-pattern> -->
		<!-- 配置方式二：请求扩展名 -->
		<!-- 优点1: xxx.css. xxx.js xxx.png 等等静态资源完全不经过SpringMVC,不需要特殊处理 -->
		<!-- 优点2: 可以实现伪静态效果.表面看起来时访问一个HTML文件这样的静态资源,但是实际上是经过Java代码运算 -->
		<!-- 	伪静态作用1:给黑客入侵增加难度. -->
		<!-- 	伪静态作用2:有利于SEO优化.(让百度,谷歌这样的搜索引擎更容易找到我们项目) -->
		<!-- 缺点:不符合RESTFul风格 -->
		<url-pattern>*.html</url-pattern>
		<!-- 如果一个Ajax请求拓展名是html,但是实际服务器给浏览器返回的json数据,二者就不匹配了,会出现406错误 -->
		<url-pattern>*.json</url-pattern>
	</servlet-mapping>

</web-app>